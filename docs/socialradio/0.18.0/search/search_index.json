{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SocialRadio","text":"<p>Broadcast your playlist, mix, or voice to the world.</p>"},{"location":"#overview","title":"Overview","text":"<p>SocialRadio is a framework that provides an interactive user interface for AutomixIQ. It allows users to start a broadcast using music from your catalog, voice, and other content. Users can also join existing broadcasts, interact with other community members or the broadcaster, and more.</p> <p>AutomixIQ is integrated into the framework to support SocialRadio, but it can also operate as a standalone product.</p> <p>This documentation provides a step-by-step guide for integrating SocialRadio into your application, using either Tuned Global\u2019s catalog or your own. It also outlines how to leverage Tuned Global\u2019s existing backend for social layer operations, or alternatively, how to implement your own custom backend.</p> <p> </p>"},{"location":"API-reference/","title":"API Reference","text":"<p>You can find the documentation of available APIs here:</p> <ul> <li>SocialRadio API Reference</li> <li>AutomixIQ Common Models Reference</li> </ul>"},{"location":"AutomixIQ/","title":"AutomixIQ","text":"<p>SocialRadio works on top of AutomixIQ. If you want to use SocialRadio together with AutomixIQ you can. Please note that manipulating playback or queue with AutomixIQ when a user is creating or consuming a radio broadcast may impact the radio broadcast itself and is therefore discouraged.</p> <p>The documentation for AutomixIQ can be found here: AutomixIQ Documentation</p>"},{"location":"Change-log/","title":"Change Log","text":"<p>This is a beta build - No change log available at the moment.</p>"},{"location":"Configure-the-SDK-custom-social/","title":"Configure the SDK with custom audio and social layer","text":""},{"location":"Configure-the-SDK-custom-social/#overview","title":"Overview","text":"<p>This document explains how to validate your client and start using the SocialRadio SDK with custom audio track data and custom social layer.</p> <p>To initialise SocialRadio with a custom backend, you need </p> <ul> <li>A store ID and an application ID provided by the Tuned Global team</li> <li>An implementation of the <code>AutomixIQStreamingListener</code> interface</li> <li>An implementation of the <code>SocialRadioTrackMetadataListener</code> interface</li> <li>An implementation of the <code>SocialRadioUIListener</code> interface</li> <li>An implementation of the <code>AuthenticationListener</code> interface</li> </ul> <p>After initialising it, on onComplete, you can use SocialRadio\u2019s singleton to get the Tuned Global\u2019s implementation of the SocialLayerListeners to overwrite the module you are interested in with your own implementation, or provide your own SocialLayerListeners. Use tunedGlobalSocialLayerListeners(). After you are happy with your complete listener set, you can set it onto SocialRadio\u2019s singleton. Use setSocialLayerListeners().</p> <pre><code>    val mySocialLayerListeners = SocialRadio.getInstance().tunedGlobalSocialLayerDelegates()\n    mySocialLayerListeners.mixtapeCommentsListener = null                    // If you are not interested in this module\n    mySocialLayerListeners.mixtapeLikesListener = myMixtapeLikesListener     // For a custom implementation of the listener\n    // ...\n    SocialRadio.getInstance().setSocialLayerListeners(mySocialLayerListeners)\n</code></pre> <p>Please refer to each module\u2019s delegation for details:</p> <ul> <li>SocialLayerAuthenticationListener</li> <li>SocialLayerLiveMixtapeListener</li> <li>SocialLayerUserListener</li> <li>SocialLayerMixtapeBackgroundsListener</li> <li>SocialLayerMixtapeCommentsListener</li> <li>SocialLayerMixtapeLikesListener</li> <li>SocialLayerModerationListener</li> <li>SocialLayerNotificationsListener</li> <li>SocialLayerTrackLikesListener</li> </ul>"},{"location":"Configure-the-SDK-custom-social/#implement-your-automixiqstreaminglistener","title":"Implement your AutomixIQStreamingListener","text":"<p><code>AutomixIQStreamingListener</code> is an interface that provides SocialRadio with the essential information from your service to support playback. Extend the <code>AutomixIQStreamingListener</code> class and implement the required functions as shown below:</p> <ul> <li>isLoggedIn</li> <li>asyncCheckDeviceStatus</li> <li>getDeviceIdentifier</li> <li>syncGetTrackMetadata</li> <li>syncGetCachedTrack</li> <li>cacheMetadata</li> <li>asyncGetTrackMetadata</li> <li>asyncLogPlayEvent</li> <li>asyncGetStream</li> <li>onTrackDownloadCompeleted</li> <li>onTrackDownloadProgressChanged</li> </ul> <p>You can find a detailed explanation in API Reference</p> <pre><code>public class MyAutomixIQStreamingListener: AutomixIQStreamingListener {\n\n    // Return whether the user is logged in\n    override fun isLoggedIn() {\n        return this.loggedIn\n    }\n\n    // Query and inform whether the device is allowed to continue playing by calling onComplete/onError\n    override fun asyncCheckDeviceStatus(onComplete: ((Boolean) -&gt; Unit)?,\n                                        onError: ((AutomixIQError) -&gt; Unit)?) -&gt; Unit) {\n        this.canDeviceContinuePlaying() { allowedToPlay -&gt;\n            onComplete(allowedToPlay)\n        }\n    }\n\n    // Return this device's unique identifier\n    override fun getDeviceIdentifier(): String? {\n        return this.deviceIdentifier\n    }\n\n    // Return the track metadata if available offline or cached\n    override fun syncGetTrackMetadata(trackId: String?): TunedTrackModel? {\n        // If this track is cached, return its metadata\n        if (!this.isTrackCached(trackId)) {\n            return null\n        }\n        return this.metadataForTrack(trackId)\n    }\n\n    // Return the track data if available offline or cached \n    override fun syncGetCachedTrack(trackId: String): ByteArray? {\n        // If this track is cached, return its data\n        if (!this.isTrackCached(trackId)) {\n            return null\n        }\n        return this.unencryptedDataForTrack(trackId)\n    }\n\n    // Cache this metadata for later use\n    override fun cacheMetadata(metadata: List&lt;TunedTrackModel&gt;) {\n        this.metadataForTrack[metadata.trackId] = metadata\n    }\n\n    // Download the track metadata and return it to AutomixIQ by running onComplete/onError\n    override fun asyncGetTrackMetadata(trackId: String,\n                                       onComplete: ((TunedTrackModel) -&gt; Unit)?,\n                                       onError: ((AutomixIQError) -&gt; Unit)?) -&gt; Unit) {\n        this.getTrackMetadata(trackId) { error, trackMetadata -&gt;\n            val automixIQTrackModel = translateMetadata(trackMetadata)\n            if (error != null) {\n                onError(error)\n                return@getTrackMetadata\n            }\n            onComplete(automixIQTrackModel)\n            return@getTrackMetadata\n        }\n    }\n\n    // If we need to report playback, do so\n    override fun asyncLogPlayEvent(trackId: String, seconds: Int, guid: String, logPlayType: String,\n                                   onComplete: (() -&gt; Unit)?,\n                                   onError: ((AutomixIQError) -&gt; Unit)?) {\n        val deviceId = myDeviceIdentifier\n        if(deviceId == null) {\n            onError?.invoke(AutomixIQError.NOT_LOGGED_IN)\n            return\n        }\n\n        this.logPlay(deviceId, trackId, seconds, guid, logPlayType, completion = { error -&gt;\n            if(error != null) {\n                onError?.invoke(error)\n                return@postLogPlay\n            }\n\n            onComplete?.invoke()\n        })\n    }\n\n    // Retrieve the track's url, and return it to AutomixIQ by running onComplete/onError\n    override fun asyncGetStream(streamingDeviceId: String, sessionId: String, trackId: String, \n                                onComplete: ((String /* URL */, String? /* newSessionId */) -&gt; Unit)?,\n                                onError: ((AutomixIQError) -&gt; Unit)?) {\n        this.getTrackURL(streamingDeviceId, sessionId, trackId) { error, url, newSessionId -&gt;\n            if (error != null) {\n                onError(error)\n                return@getTrackURL\n            }\n            onComplete(url, newSessionId, null)\n        }\n    }\n\n    // AutomixIQ will return the audio data once a download is completed\n    override fun onTrackDownloadCompeleted(trackId: String, data: ByteArray) {\n        this.cacheTrack(trackId, data)\n    }\n\n    // Monitor the download progress (0 to 1)\n    override fun onTrackDownloadProgressChanged(trackId: String, progress: Float) {\n        this.updateTrackDownloadProgress(trackId, progress)\n    }\n}\n</code></pre> <p>Do keep in mind that SocialRadio downloads tracks lazily as it requires data for analysis / playback. There is no guarantee a track will be fully downloaded if the track is not played in its entirety.</p>"},{"location":"Configure-the-SDK-custom-social/#implement-your-socialradiotrackmetadatalistener","title":"Implement your SocialRadioTrackMetadataListener","text":"<p>The <code>SocialRadioTrackMetadataListener</code> is responsible for getting artwork for tracks, and track recommendations. Extend the <code>SocialRadioTrackMetadataListener</code> class and implement the required functions as shown below:</p> <ul> <li>asyncGetThumborLocation</li> <li>asyncGetTrackRecommendations</li> </ul> <pre><code>public class MySocialRadioTrackMetadataListener: SocialRadioTrackMetadataListener {\n\n    override fun asyncGetThumborLocation(onComplete: ((String /* URL */) -&gt; Unit)? = null,\n                                         onError: ((SocialRadioError) -&gt; Unit)? = null) {\n        return onComplete(myArtworkProviderURL)\n    }\n\n    override fun asyncGetTrackRecommendations(identifiers: Array&lt;String&gt;,\n                                              contextTrackIdentifiers: Array&lt;String&gt;,\n                                              limit: Int,\n                                              onComplete: ((Array&lt;TunedTrackModel&gt;) -&gt; Unit)? = null,\n                                              onError: ((SocialRadioError) -&gt; Unit)? = null) {\n        return onComplete(this.trackRecommendations(identifiers))\n    }\n}\n</code></pre>"},{"location":"Configure-the-SDK-custom-social/#implement-your-socialradioradiouilistener","title":"Implement your SocialRadioRadioUIListener","text":"<p><code>SocialRadioRadioUIListener</code> is an interface that provides data required for the Radio UI to function, as well as being responsible for presenting UI SocialRadio is not able to do on its own. Extend the <code>SocialRadioRadioUIListener</code> class and implement the required (an optionally, those marked as optinal) methods as shown below:</p> <ul> <li>presentTracklist</li> <li>presentAuthentication</li> <li>presentProfile</li> <li>isTrackLiked</li> <li>setTrackLiked</li> </ul> <p>and optionally,</p> <ul> <li>onDismiss</li> <li>onDestroy</li> </ul> <pre><code>class MyRadioUIListener: SocialRadioRadioUIListener {\n\n    override fun presentTracklist(context: Context, completion: (tracks: List&lt;AutomixSDKTrackModel&gt;?,\n                                                                 contextType: String?, contextId: Int,\n                                                                 playlistName: String?) -&gt; Unit) {\n        // Your implementation for presenting UI that allows to select one or more tracks:\n        // - Feed the track/tracks selected as the second paramenter of the completion block,\n        // - If the tracks selected are part of a playlist, feed the name opf that playlist as the thirsd parameter of the completion block.\n        val context = myActivityContext\n        val myTracklist = MyTracklist(context = myActivityContext, selectedTracksBloc = { tracks, playlistName -&gt;\n            completion(track, playlist, playlistName)\n        })\n        myTracklist.show()\n    }\n\n    override fun presentAuthentication(context: Context, completion: (success: Boolean) -&gt; Unit) {\n        // At a time where SocialRadio requires a User Id, if it does not have one it will require the user to authenticate by calling this function.\n        // Present your login block here\n        val context = myActivityContext\n        val myLoginDialog = MyLoginDialog(context = myActivityContext, onLogin = { success -&gt; \n            completion(success)\n        })\n        myLoginDialog.show()\n    }\n\n    override fun presentProfile(context: Context, identifier: String?, completion: () -&gt; Unit) {\n        // At times, SocialRadio will need to present a users' profile. It will do so by calling this function.\n        val context = myActivityContext\n        val myProfileDialog = MyProfileDialog(context = myActivityContext)\n        myProfileDialog.show()\n    }\n</code></pre>"},{"location":"Configure-the-SDK-custom-social/#implement-your-authenticationlistener","title":"Implement your AuthenticationListener","text":"<p><code>AuthenticationListener</code> is an interface that is responsible for fetching and refreshing your social backend's credentials. Extend the <code>AuthenticationListener</code> class and implement the required methods as shown below:</p> <ul> <li>refreshSocialCredentials</li> </ul> <pre><code>class MyAuthenticationListener: AuthenticationListener {\n\n    override fun refreshSocialCredentials(oldAccessToken: String?, refreshToken: String?, tokenType: String?,\n                                          completion: (error: SocialRadioError?,\n                                                       credentials: SocialRadioCredentials?) -&gt; Unit) {\n        return this.refreshCreds(oldAccessToken, refreshToken, tokenType, completion)\n    }\n}\n</code></pre>"},{"location":"Configure-the-SDK-custom-social/#configure-socialradio","title":"Configure SocialRadio","text":"<p>You can also tweak the SocialRadio UI and available feature set by changing flags on the config object. See SocialRadioConfig, SocialRadioFeatureSetConfig and SocialRadioUIConfig,</p>"},{"location":"Configure-the-SDK-custom-social/#initialise-socialradio-instance","title":"Initialise SocialRadio instance","text":"<p>Create an <code>SocialRadioConfig</code> first. The store and application ID will be provided by the Tuned Global team. You can tweak the SocialRadio UI and available feature set by changing flags on the config object.</p> <pre><code>val radioConfig =\n    SocialRadioConfig.Builder()\n        .apiKey(myAPIKey)\n        .country(myCountryISO2Code) // Device country code e.g. \"US\", \"AU\"\n        .storeId(myTunedStoreId )\n        .applicationId(myTunedApplicationId)\n        .build()\n</code></pre> <p>Initialise the SocialRadio instance with the <code>TunedRestHook</code>, <code>SocialRadioRadioUIListener</code> and <code>SocialRadioConfig</code> created in previous steps. We recommend initialising the SDK once your music background service is up and running.</p> <p>Note</p> <p>SocialRadio requires an active internet connection for its initial verification. After this initial setup, it can be initialised offline. However, note that there is a grace period of 7 days, after which an internet connection will be required again for re-verification.</p> <pre><code>    SocialRadio.initialise(applicationContext = applicationContext,\n                           config = radioConfig,\n                           automixIQStreamingListener = myAutomixIQStreamingListener,\n                           socialRadioTrackMetadataListener = mySocialRadioTrackMetadataListener,\n                           socialRadioUIListener = mySocialRadioUIListener,\n                           authenticationListener: myAuthenticationListener\n                           onComplete = { automixStatus -&gt;\n\n        // The SocialRadio public functions can be used from this point onwards :)\n\n        // We can add a status listener to get UI updates and play events, you can add as many AutomixSDKStatusListener as you like\n        val socialRadioStatusListener: SocialRadioStatusListener = mySocialRadioStatusListener\n        SocialRadio.getInstance()?.addStatusListener(socialRadioStatusListener)\n\n        // ...\n    }, onError = { socialRadioError, socialRadioStatus -&gt; \n        // This means you do not have permission to use SocialRadio or there is no internet connection when required.\n        return\n    })\n</code></pre>"},{"location":"Configure-the-SDK-custom-social/#implement-socialradiostatuslistener-optional","title":"Implement SocialRadioStatusListener (Optional)","text":"<p>The <code>SocialRadioStatusListener</code> is responsible for updating your player\u2019s UI, please refer to Update UI</p>"},{"location":"Configure-the-SDK-custom-social/#check-initialised-state","title":"Check initialised state","text":"<p>To check whether SocialRadio is initialised </p> <pre><code>SocialRadio.getInstance()?.initialised()\n</code></pre>"},{"location":"Configure-the-SDK-custom-social/#shut-down","title":"Shut down","text":"<p>To shut down SocialRadio</p> <pre><code>SocialRadio.terminate()\n</code></pre> <p>After you have terminated the SDK, you will need to reinitialise if you want to use SocialRadio again.</p>"},{"location":"Configure-the-SDK-custom/","title":"Configure the SDK with custom audio","text":""},{"location":"Configure-the-SDK-custom/#overview","title":"Overview","text":"<p>This document explains how to integrate SocialRadio with your application using a custom backend to retrieve audio and metadata.</p> <p>To initialise SocialRadio with a custom backend, you need </p> <ul> <li>A store ID and an application ID provided by the Tuned Global team</li> <li>An implementation of the <code>AutomixIQStreamingListener</code> interface</li> <li>An implementation of the <code>SocialRadioTrackMetadataListener</code> interface</li> <li>An implementation of the <code>SocialRadioUIListener</code> interface</li> <li>An implementation of the <code>AuthenticationListener</code> interface</li> </ul>"},{"location":"Configure-the-SDK-custom/#implement-your-automixiqstreaminglistener","title":"Implement your AutomixIQStreamingListener","text":"<p><code>AutomixIQStreamingListener</code> is an interface that provides SocialRadio with the essential information from your service to support playback. Extend the <code>AutomixIQStreamingListener</code> class and implement the required functions as shown below:</p> <ul> <li>isLoggedIn</li> <li>asyncCheckDeviceStatus</li> <li>getDeviceIdentifier</li> <li>syncGetTrackMetadata</li> <li>syncGetCachedTrack</li> <li>cacheMetadata</li> <li>asyncGetTrackMetadata</li> <li>asyncLogPlayEvent</li> <li>asyncGetStream</li> <li>onTrackDownloadCompeleted</li> <li>onTrackDownloadProgressChanged</li> </ul> <p>You can find a detailed explanation in API Reference</p> <pre><code>public class MyAutomixIQStreamingListener: AutomixIQStreamingListener {\n\n    // Return whether the user is logged in\n    override fun isLoggedIn() {\n        return this.loggedIn\n    }\n\n    // Query and inform whether the device is allowed to continue playing by calling onComplete/onError\n    override fun asyncCheckDeviceStatus(onComplete: ((Boolean) -&gt; Unit)?,\n                                        onError: ((AutomixIQError) -&gt; Unit)?) -&gt; Unit) {\n        this.canDeviceContinuePlaying() { allowedToPlay -&gt;\n            onComplete(allowedToPlay)\n        }\n    }\n\n    // Return this device's unique identifier\n    override fun getDeviceIdentifier(): String? {\n        return this.deviceIdentifier\n    }\n\n    // Return the track metadata if available offline or cached\n    override fun syncGetTrackMetadata(trackId: String?): TunedTrackModel? {\n        // If this track is cached, return its metadata\n        if (!this.isTrackCached(trackId)) {\n            return null\n        }\n        return this.metadataForTrack(trackId)\n    }\n\n    // Return the track data if available offline or cached \n    override fun syncGetCachedTrack(trackId: String): ByteArray? {\n        // If this track is cached, return its data\n        if (!this.isTrackCached(trackId)) {\n            return null\n        }\n        return this.unencryptedDataForTrack(trackId)\n    }\n\n    // Cache this metadata for later use\n    override fun cacheMetadata(metadata: List&lt;TunedTrackModel&gt;) {\n        this.metadataForTrack[metadata.trackId] = metadata\n    }\n\n    // Download the track metadata and return it to AutomixIQ by running onComplete/onError\n    override fun asyncGetTrackMetadata(trackId: String,\n                                       onComplete: ((TunedTrackModel) -&gt; Unit)?,\n                                       onError: ((AutomixIQError) -&gt; Unit)?) -&gt; Unit) {\n        this.getTrackMetadata(trackId) { error, trackMetadata -&gt;\n            val automixIQTrackModel = translateMetadata(trackMetadata)\n            if (error != null) {\n                onError(error)\n                return@getTrackMetadata\n            }\n            onComplete(automixIQTrackModel)\n            return@getTrackMetadata\n        }\n    }\n\n    // If we need to report playback, do so\n    override fun asyncLogPlayEvent(trackId: String, seconds: Int, guid: String, logPlayType: String,\n                                   onComplete: (() -&gt; Unit)?,\n                                   onError: ((AutomixIQError) -&gt; Unit)?) {\n        val deviceId = myDeviceIdentifier\n        if(deviceId == null) {\n            onError?.invoke(AutomixIQError.NOT_LOGGED_IN)\n            return\n        }\n\n        this.logPlay(deviceId, trackId, seconds, guid, logPlayType, completion = { error -&gt;\n            if(error != null) {\n                onError?.invoke(error)\n                return@postLogPlay\n            }\n\n            onComplete?.invoke()\n        })\n    }\n\n    // Retrieve the track's url, and return it to AutomixIQ by running onComplete/onError\n    override fun asyncGetStream(streamingDeviceId: String, sessionId: String, trackId: String, \n                                onComplete: ((String /* URL */, String? /* newSessionId */) -&gt; Unit)?,\n                                onError: ((AutomixIQError) -&gt; Unit)?) {\n        this.getTrackURL(streamingDeviceId, sessionId, trackId) { error, url, newSessionId -&gt;\n            if (error != null) {\n                onError(error)\n                return@getTrackURL\n            }\n            onComplete(url, newSessionId, null)\n        }\n    }\n\n    // AutomixIQ will return the audio data once a download is completed\n    override fun onTrackDownloadCompeleted(trackId: String, data: ByteArray) {\n        this.cacheTrack(trackId, data)\n    }\n\n    // Monitor the download progress (0 to 1)\n    override fun onTrackDownloadProgressChanged(trackId: String, progress: Float) {\n        this.updateTrackDownloadProgress(trackId, progress)\n    }\n}\n</code></pre> <p>Do keep in mind that SocialRadio downloads tracks lazily as it requires data for analysis / playback. There is no guarantee a track will be fully downloaded if the track is not played in its entirety.</p>"},{"location":"Configure-the-SDK-custom/#implement-your-socialradiotrackmetadatalistener","title":"Implement your SocialRadioTrackMetadataListener","text":"<p>The <code>SocialRadioTrackMetadataListener</code> is responsible for getting artwork for tracks, and track recommendations. Extend the <code>SocialRadioTrackMetadataListener</code> class and implement the required functions as shown below:</p> <ul> <li>asyncGetThumborLocation</li> <li>asyncGetTrackRecommendations</li> </ul> <pre><code>public class MySocialRadioTrackMetadataListener: SocialRadioTrackMetadataListener {\n\n    override fun asyncGetThumborLocation(onComplete: ((String /* URL */) -&gt; Unit)? = null,\n                                         onError: ((SocialRadioError) -&gt; Unit)? = null) {\n        return onComplete(myArtworkProviderURL)\n    }\n\n    override fun asyncGetTrackRecommendations(identifiers: Array&lt;String&gt;,\n                                              contextTrackIdentifiers: Array&lt;String&gt;,\n                                              limit: Int,\n                                              onComplete: ((Array&lt;TunedTrackModel&gt;) -&gt; Unit)? = null,\n                                              onError: ((SocialRadioError) -&gt; Unit)? = null) {\n        return onComplete(this.trackRecommendations(identifiers))\n    }\n}\n</code></pre>"},{"location":"Configure-the-SDK-custom/#implement-your-socialradioradiouilistener","title":"Implement your SocialRadioRadioUIListener","text":"<p><code>SocialRadioRadioUIListener</code> is an interface that provides data required for the Radio UI to function, as well as being responsible for presenting UI SocialRadio is not able to do on its own. Extend the <code>SocialRadioRadioUIListener</code> class and implement the required (an optionally, those marked as optinal) methods as shown below:</p> <ul> <li>presentTracklist</li> <li>presentAuthentication</li> <li>presentProfile</li> <li>isTrackLiked</li> <li>setTrackLiked</li> </ul> <p>and optionally,</p> <ul> <li>onDismiss</li> <li>onDestroy</li> </ul> <pre><code>class MyRadioUIListener: SocialRadioRadioUIListener {\n\n    override fun presentTracklist(context: Context, completion: (tracks: List&lt;AutomixSDKTrackModel&gt;?,\n                                                                 contextType: String?, contextId: Int,\n                                                                 playlistName: String?) -&gt; Unit) {\n        // Your implementation for presenting UI that allows to select one or more tracks:\n        // - Feed the track/tracks selected as the second paramenter of the completion block,\n        // - If the tracks selected are part of a playlist, feed the name opf that playlist as the thirsd parameter of the completion block.\n        val context = myActivityContext\n        val myTracklist = MyTracklist(context = myActivityContext, selectedTracksBloc = { tracks, playlistName -&gt;\n            completion(track, playlist, playlistName)\n        })\n        myTracklist.show()\n    }\n\n    override fun presentAuthentication(context: Context, completion: (success: Boolean) -&gt; Unit) {\n        // At a time where SocialRadio requires a Tuned User Id, if it does not have one it will require the user to authenticate by calling this function.\n        // Present your login block here\n        val context = myActivityContext\n        val myLoginDialog = MyLoginDialog(context = myActivityContext, onLogin = { success -&gt; \n            completion(success)\n        })\n        myLoginDialog.show()\n    }\n\n    override fun presentProfile(context: Context, identifier: String?, completion: () -&gt; Unit) {\n        // At times, SocialRadio will need to present a users' profile. It will do so by calling this function.\n        val context = myActivityContext\n        val myProfileDialog = MyProfileDialog(context = myActivityContext)\n        myProfileDialog.show()\n    }\n</code></pre>"},{"location":"Configure-the-SDK-custom/#implement-your-authenticationlistener","title":"Implement your AuthenticationListener","text":"<p><code>AuthenticationListener</code> is an interface that is responsible for fetching and refreshing your social backend's credentials. Extend the <code>AuthenticationListener</code> class and implement the required methods as shown below:</p> <ul> <li>refreshSocialCredentials</li> </ul> <pre><code>class MyAuthenticationListener: AuthenticationListener {\n\n    override fun refreshSocialCredentials(oldAccessToken: String?, refreshToken: String?, tokenType: String?,\n                                          completion: (error: SocialRadioError?,\n                                                       credentials: SocialRadioCredentials?) -&gt; Unit) {\n        return this.refreshCreds(oldAccessToken, refreshToken, tokenType, completion)\n    }\n}\n</code></pre>"},{"location":"Configure-the-SDK-custom/#initialise-socialradio-instance","title":"Initialise SocialRadio instance","text":"<p>Create an <code>SocialRadioConfig</code> first. The store and application ID will be provided by the Tuned Global team. You can tweak the SocialRadio UI and available feature set by changing flags on the config object.</p> <pre><code>val radioConfig =\n    SocialRadioConfig.Builder()\n        .apiKey(myAPIKey)\n        .country(myCountryISO2Code) // Device country code e.g. \"US\", \"AU\"\n        .storeId(myTunedStoreId )\n        .applicationId(myTunedApplicationId)\n        .build()\n</code></pre> <p>Initialise the SocialRadio instance with the <code>TunedRestHook</code>, <code>SocialRadioRadioUIListener</code> and <code>SocialRadioConfig</code> created in previous steps. We recommend initialising the SDK once your music background service is up and running.</p> <p>Note</p> <p>SocialRadio requires an active internet connection for its initial verification. After this initial setup, it can be initialised offline. However, note that there is a grace period of 7 days, after which an internet connection will be required again for re-verification.</p> <pre><code>    SocialRadio.initialise(applicationContext = applicationContext,\n                           config = radioConfig,\n                           automixIQStreamingListener = myAutomixIQStreamingListener,\n                           socialRadioTrackMetadataListener = mySocialRadioTrackMetadataListener,\n                           socialRadioUIListener = mySocialRadioUIListener,\n                           authenticationListener: myAuthenticationListener\n                           onComplete = { automixStatus -&gt;\n\n        // The SocialRadio public functions can be used from this point onwards :)\n\n        // We can add a status listener to get UI updates and play events, you can add as many AutomixSDKStatusListener as you like\n        val socialRadioStatusListener: SocialRadioStatusListener = mySocialRadioStatusListener\n        SocialRadio.getInstance()?.addStatusListener(socialRadioStatusListener)\n\n        // ...\n    }, onError = { socialRadioError, socialRadioStatus -&gt; \n        // This means you do not have permission to use SocialRadio or there is no internet connection when required.\n        return\n    })\n</code></pre>"},{"location":"Configure-the-SDK-custom/#implement-socialradiostatuslistener-optional","title":"Implement SocialRadioStatusListener (Optional)","text":"<p>The <code>SocialRadioStatusListener</code> is responsible for updating your player\u2019s UI, please refer to Update UI</p>"},{"location":"Configure-the-SDK-custom/#check-initialised-state","title":"Check initialised state","text":"<p>To check whether SocialRadio is initialised </p> <pre><code>SocialRadio.getInstance()?.initialised()\n</code></pre>"},{"location":"Configure-the-SDK-custom/#shut-down","title":"Shut down","text":"<p>To shut down SocialRadio</p> <pre><code>SocialRadio.terminate()\n</code></pre> <p>After you have terminated the SDK, you will need to reinitialise if you want to use SocialRadio again.</p>"},{"location":"Configure-the-SDK-tuned/","title":"Configure the SDK with Tuned Global backend","text":""},{"location":"Configure-the-SDK-tuned/#overview","title":"Overview","text":"<p>This document explains how to integrate SocialRadio with your application using Tuned Global\u2019s backend to access tracks and metadata.</p> <p>To initialise SocialRadio with Tuned Global's API and services, you need </p> <ul> <li>A store ID and an application ID provided by the Tuned Global team</li> <li>An implementation of the <code>TunedRestHook</code> interface</li> </ul>"},{"location":"Configure-the-SDK-tuned/#implement-your-tunedresthook","title":"Implement your TunedRestHook","text":"<p><code>TunedRestHook</code> is an interface that facilitates communication between the Tuned Global Backend and the SocialRadio SDK regarding the user's access token and device information. Extend the <code>TunedRestHook</code> class and implement the required functions as shown below:</p> <ul> <li>getAuthenticatedDevice</li> <li>getUniqueDeviceIdentifier</li> <li>onTunedRestTokenExpired</li> <li>automaticallyLogPlayback</li> </ul> <p>You can find a detailed explanation in API Reference</p> <pre><code>class MyTunedRestHook: TunedRestHook {\n\n    // Return the Tuned API device ID integer\n    override suspend fun getAuthenticatedDevice(uniqueDeviceIdentifier: String): String? {\n        val myTunedDeviceId: String = tunedDeviceId\n        return myTunedDeviceId\n    }\n\n    // Return an ID that can be used to identify a device.\n    // This is typically a randomly generated UUID that persists through app restarts.\n    override fun getUniqueDeviceIdentifier(): String {\n        val uuid: String = myUniqueDeviceIdentifier\n        return uuid\n    }\n\n    // Use the info provided from the parameters to refresh the Tuned user token\n    override suspend fun onTunedRestTokenExpired(uniqueDeviceIdentifier: String,\n                                                 countryCode: String,\n                                                 tunedUserId: String?,\n                                                 oldAccessToken: String?,\n                                                 refreshToken: String?,\n                                                 tokenType: String?): TunedAuthenticationResponse? {\n        // your implementation of refreshing Tuned user token\n        val tunedAuthenticationResponse: TunedAuthenticationResponse? = null\n        withContext(Dispatchers.IO) {\n            suspendCancellableCoroutine { continuation -&gt;\n                refreshToken(refreshToken, tokenType, uniqueDeviceIdentifier) { authToken, tokenType, tokenExpiration, refreshToken -&gt;\n                    val userId = tunedUserId\n                    tunedAuthenticationResponse = TunedAuthenticationResponse(authToken,\n                                                                              tokenType,\n                                                                              tokenExpiration,\n                                                                              refreshToken,\n                                                                              tunedUserId)\n                    continuation.resume(Unit)\n                }\n            }\n        }\n        return tunedAuthenticationResponse\n    }\n\n    // Decide wether or not the SDK will log playback events for you or you will be responsible for logging them\n    override fun automaticallyLogPlayback(): Boolean {\n        return true // It will log events automatically\n    }\n}\n</code></pre>"},{"location":"Configure-the-SDK-tuned/#implement-your-socialradioradiouilistener","title":"Implement your SocialRadioRadioUIListener","text":"<p><code>SocialRadioRadioUIListener</code> is an interface that provides data required for the Radio UI to function, as well as being responsible for presenting UI SocialRadio is not able to do on its own. Extend the <code>SocialRadioRadioUIListener</code> class and implement the required (an optionally, those marked as optinal) methods as shown below:</p> <ul> <li>presentTracklist</li> <li>presentAuthentication</li> <li>presentProfile</li> </ul> <p>and optionally,</p> <ul> <li>onDismiss</li> <li>onDestroy</li> </ul> <pre><code>class MyRadioUIListener: SocialRadioRadioUIListener {\n\n    override fun presentTracklist(context: Context, completion: (tracks: List&lt;AutomixSDKTrackModel&gt;?, \n                                                                 contextType: String?, contextId: Int,\n                                                                 playlistName: String?) -&gt; Unit) {\n        // Your implementation for presenting UI that allows to select one or more tracks:\n        // - Feed the track/tracks selected as the second paramenter of the completion block,\n        // - If the tracks selected are part of a playlist, feed the name opf that playlist as the thirsd parameter of the completion block.\n        val context = myActivityContext\n        val myTracklist = MyTracklist(context = myActivityContext, selectedTracksBloc = { tracks, playlistName -&gt;\n            completion(track, playlist, playlistName)\n        })\n        myTracklist.show()\n    }\n\n    override fun presentAuthentication(context: Context, completion: (success: Boolean) -&gt; Unit) {\n        // At a time where SocialRadio requires a Tuned User Id, if it does not have one it will require the user to authenticate by calling this function.\n        // Present your login block here\n        val context = myActivityContext\n        val myLoginDialog = MyLoginDialog(context = myActivityContext, onLogin = { success -&gt; \n            completion(success)\n        })\n        myLoginDialog.show()\n    }\n\n    override fun presentProfile(context: Context, identifier: String?, completion: () -&gt; Unit) {\n        // At times, SocialRadio will need to present a users' profile. It will do so by calling this function.\n        val context = myActivityContext\n        val myProfileDialog = MyProfileDialog(context = myActivityContext)\n        myProfileDialog.show()\n    }\n</code></pre>"},{"location":"Configure-the-SDK-tuned/#initialise-socialradio-instance","title":"Initialise SocialRadio instance","text":"<p>Create an <code>SocialRadioConfig</code> first. The store and application ID will be provided by the Tuned Global team. You can tweak the SocialRadio UI and available feature set by changing flags on the config object.</p> <pre><code>val radioConfig =\n    SocialRadioConfig.Builder()\n        .apiKey(myAPIKey)\n        .country(myCountryISO2Code) // Device country code e.g. \"US\", \"AU\"\n        .storeId(myTunedStoreId )\n        .applicationId(myTunedApplicationId)\n        .build()\n</code></pre> <p>Initialise the SocialRadio instance with the <code>TunedRestHook</code>, <code>SocialRadioRadioUIListener</code> and <code>SocialRadioConfig</code> created in previous steps. We recommend initialising the SDK once your music background service is up and running.</p> <p>Note</p> <p>SocialRadio requires an active internet connection for its initial verification. After this initial setup, it can be initialised offline. However, note that there is a grace period of 7 days, after which an internet connection will be required again for re-verification.</p> <pre><code>    SocialRadio.initialise(applicationContext = applicationContext,\n                           tunedRestHook = myTunedRestHook,\n                           config = radioConfig,\n                           radioUIListener = radioUIListener,\n                           onComplete = { automixStatus -&gt;\n\n        // The SocialRadio public functions can be used from this point onwards :)\n\n        // We can add a status listener to get UI updates and play events, you can add as many AutomixSDKStatusListener as you like\n        val socialRadioStatusListener: SocialRadioStatusListener = mySocialRadioStatusListener\n        SocialRadio.getInstance()?.addStatusListener(socialRadioStatusListener)\n\n        // ...\n    }, onError = { socialRadioError, socialRadioStatus -&gt; \n        // This means you do not have permission to use SocialRadio or there is no internet connection when required.\n        return\n    })\n</code></pre>"},{"location":"Configure-the-SDK-tuned/#implement-socialradiostatuslistener-optional","title":"Implement SocialRadioStatusListener (Optional)","text":"<p>The <code>SocialRadioStatusListener</code> is responsible for updating your player\u2019s UI, please refer to Update UI</p>"},{"location":"Configure-the-SDK-tuned/#check-initialised-state","title":"Check initialised state","text":"<p>To check whether SocialRadio is initialised </p> <pre><code>SocialRadio.getInstance()?.initialised()\n</code></pre>"},{"location":"Configure-the-SDK-tuned/#shut-down","title":"Shut down","text":"<p>To shut down SocialRadio</p> <pre><code>SocialRadio.terminate()\n</code></pre> <p>After you have terminated the SDK, you will need to reinitialise if you want to use SocialRadio again.</p>"},{"location":"Data-model/","title":"Data model","text":"<p>List of enums and data models used by SocialRadio to communicate with the client app.</p>"},{"location":"Data-model/#enums","title":"Enums","text":"<ul> <li>SocialRadioError</li> </ul>"},{"location":"Data-model/#data-models","title":"Data Models","text":"<ul> <li>SocialRadioList</li> <li>SocialRadioListItem</li> <li>SocialRadioUser</li> <li>SocialRadioMixtape</li> <li>SocialRadioMixtapeCounters</li> <li>SocialRadioMixtapeLite</li> <li>SocialRadioMixtapeTrack</li> <li>SocialRadioMixtapeTrackImage</li> <li>SocialRadioWaveformBlob</li> <li>SocialRadioRestAPIConfig</li> </ul>"},{"location":"Get-available-broadcasts/","title":"Get available broadcasts","text":"<p>When you want to fetch a list of currently available live broadcasts as paged request, you use this function as shown below:</p> <ul> <li>getLiveShows</li> </ul> Get available broadcasts<pre><code>class MyApplicationActivity : AppCompatActivity() {\n\n    ...\n    fun getShows() {\n        val limit: Int = 10             // Get a total of 10 shows\n        val start: Int = 0              // Get the first shows\n        SocialRadio.getInstance())?.getLiveBroadcasts(limit = limit, start = start,\n                                                      onComplete = { liveBroadcasts -&gt;\n            // Present the broadcasts on your UI\n            val myLiveBroadcasts = myLiveBroadcast\n            myLiveBroadcast.add(liveBroadcasts)\n            if(liveBroadcasts.size &lt; limit) {\n                // There are more shows available!\n                getNextLiveBroadcastsPage()\n            }\n        },\n        onError = { error -&gt;\n            Log.i(\"MyLog\", \"Failed to get live broadcasts\")\n        })\n    }\n    ...\n}\n</code></pre>"},{"location":"Handle-error/","title":"Handle error","text":"<p>Most of the public APIs of SocialRadio will return a <code>SocialRadioError</code> object through the <code>onError</code> method if any error is encountered.</p> <p>You can find a detailed list of errors here: SocialRadioError Reference.</p>"},{"location":"Install-the-SDK/","title":"Install the SDK","text":""},{"location":"Install-the-SDK/#requirements","title":"Requirements","text":"<p>This SDK requires a minimum of Android API Level 21.</p>"},{"location":"Install-the-SDK/#importing-artifacts","title":"Importing artifacts","text":"<p>SocialRadio can be brought into your project via our private maven repository.</p> <p>Step 1: Include Tuned Global's maven repository</p> settings.gradle.kts<pre><code>dependencyResolutionManagement {\n     repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n     repositories {\n         // ...\n         maven(url = \"https://tunedglobal.pkgs.visualstudio.com/TunedGlobalPublic/_packaging/builds/maven/v1\")\n         // ...\n     }\n}\n</code></pre> <p>Step 2: Add the dependency to your target</p> build.gradle.kts<pre><code>val socialRadioVersion = project.findProperty(\"com.tunedglobal.socialradio.version\")\n\ndependencies {\n    // ...\n    implementation(\"org.greenrobot:eventbus:3.3.1\")\n    implementation(\"com.tunedglobal:radiosdk:$socialRadioVersion\")\n    // ...\n}\n</code></pre> <p>Step 3: You should now be able to use SocialRadio</p> <pre><code>import com.tunedglobal.radio.*\n</code></pre>"},{"location":"Install-the-SDK/#configure-proguard-optional","title":"Configure Proguard (Optional)","text":"<p>If you have any issues finding classes in the SDK, try adding the following to your Proguard configuration.</p> <pre><code># AutomixIQ\n-keep class com.tunedglobal.automix.logic.cpp.AMJNILib  {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.nativewidgets.NativeWidgetsHelper {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.notifications.NotificationsHelper {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.DialogsHelper  {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.ImageHelper  {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.LocalisationHelper {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.RadioUI {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.SamplePlayerHelper {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.SocialLayerHelper {\n    public static *;\n    public *;\n}\n-keep class com.tunedglobal.radio.logic.cpp.TextRenderHelper {\n    public static *;\n    public *;\n}\n</code></pre>"},{"location":"Join-a-broadcast/","title":"Join a broadcast","text":"<p>When you want to join an existing radio broadcast to listen to and interact with it, you use this function as shown below:</p> <ul> <li>joinLiveMixtape</li> </ul> <p>This interface will present the live broadcast and play it, and also provides UI elements to minimise or exit the live session.</p> Join a broadcast<pre><code>class MyApplicationActivity : AppCompatActivity() {\n\n    ...\n    fun onJoinLiveBroadcastButtonPressed(indentifier: String) {\n        val context = this\n        SocialRadio.getInstance()?.joinLiveBroadcast(context = context,\n                                                     identifier = identifier,\n                                                     onComplete = { intent -&gt; \n            startActivity(intent)\n        }, onError = { error -&gt; \n            Log.i(\"MyLog\", \"RadioSession failed to join\")\n        })\n    }\n    ...\n}\n</code></pre> <p>When you want to programatically force-end a radio session the user is listening to, use this function as shown below:</p> <ul> <li>endRadioSession</li> </ul> End a broadcast<pre><code>class MyApplicationActivity : AppCompatActivity() {\n\n    ...\n    fun onEndRadioSessionButtonPressed() {\n        SocialRadio.getInstance().endRadioSession()\n    }\n    ...\n\n}\n</code></pre>"},{"location":"Moderation/","title":"Moderation","text":"<p>SocialRadio offers moderation of content by allowing the user to report inapropriate mixtapes or users. To do so, you use</p> <ul> <li>reportUser</li> <li>reportMixtape</li> </ul> Reporting inapropriate content<pre><code>class MyApplicationActivity : AppCompatActivity() {\n\n    ...\n    fun onReportUserButtonPressed(identifier: String) {\n        SocialRadio.getInstance()?.reportUser(identifier, onComplete = {\n        },\n        onError = { error, status -&gt; \n            Log.i(\"MyLog\", \"RadioSession failed to report a user\")\n        })\n    }\n\n    fun onReportMixtapeButtonPressed(identifier: String) {\n        SocialRadio.getInstance()?.reportMixtape(identifier, onComplete = {\n        },\n        onError = { error, status -&gt; \n            Log.i(\"MyLog\", \"RadioSession failed to report a user\")\n        })\n    }\n    ...\n\n}\n</code></pre> <p>SocialRadio also offers the possibility of sending users a notification. To do so, you use </p> <ul> <li>notifyFollowers</li> </ul> Notifying users<pre><code>class MyApplicationActivity : AppCompatActivity() {\n\n    ...\n    fun notifyFollowers(identifier: String, title: String, body: String, objectType: String?, objectId: String?) {\n        SocialRadio.getInstance()?.notifyFollowers(userIdentifier = identifier, title, body, objectType, objectId, onComplete = {\n        },\n        onError = { error -&gt; \n            Log.i(\"MyLog\", \"RadioSession failed to notify users\")\n        })\n    }\n    ...\n\n}\n</code></pre>"},{"location":"Start-a-broadcast/","title":"Start a broadcast","text":"<p>When you want to start a radio broadcast, you use this function as shown below:</p> <ul> <li>startRadioSession</li> </ul> <p>You can either start a radio session with a bunch of identifiers, or an empty one. This function will not make the user go live with his or her session inmediately, instead it will create a draft he or she can edit or curate first.</p> <p>This function provides an Activity with the SocialRadio UI. Starting that activity will allow the user to curate that playlist, and when ready, go \"Live\" with it.</p> Start a broadcast<pre><code>class MyApplicationActivity : AppCompatActivity() {\n\n    ...\n    fun onStartRadioSessionButtonPressed() {\n        val context = this\n        val identifiers: List&lt;String&gt;? = myIdentifiers                   // Can be null\n        val metadata: List&lt;AutomixSDKTrackModel&gt;? = null                 // Populate if available\n        SocialRadio.getInstance()?.startRadioSession(context = context,\n                                                     identifiers = identifiers,\n                                                     metadata = metadata,\n                                                     playTrackIndex = 0, seconds = 0F, autoplay = true,\n                                                     contextType = null,\n                                                     contextId = null,\n                                                     onComplete = { intent, status -&gt; \n            startActivity(intent)\n        },\n        onError = { error, status -&gt; \n            Log.i(\"MyLog\", \"RadioSession failed to create\")\n        })\n    }\n    ...\n\n}\n</code></pre> <p>When you want to programatically force-end a radio session the user has created, use this function as shown below:</p> <ul> <li>endRadioSession</li> </ul> End a broadcast<pre><code>class MyApplicationActivity : AppCompatActivity() {\n\n    ...\n    fun onEndRadioSessionButtonPressed() {\n        SocialRadio.getInstance().endRadioSession()\n    }\n    ...\n\n}\n</code></pre>"},{"location":"Update-ui/","title":"Update UI","text":"<p>SocialRadio provides realtime status update and playback events after the player starts playing. You can register multiple listeners to monitor the status of the player and update your UI accordingly.</p>"},{"location":"Update-ui/#register-status-listener","title":"Register status listener","text":"<p>You can register a status listener any time after the SDK is initialised.</p> <pre><code>SocialRadio.getInstance()?.addStatusListener(myStatusListener)\n</code></pre>"},{"location":"Update-ui/#unregister-status-listener","title":"Unregister status listener","text":"<p>You can unregister the listener and stop receiving status updates and events when you do not need it any more.</p> <pre><code>SocialRadio.getInstance()?.removeStatusListener(myStatusListener)\n</code></pre>"},{"location":"Update-ui/#implement-status-listener","title":"Implement status listener","text":"<p>Extend the <code>SocialRadioStatusListener</code> class and implement the required functions as shown below:</p> <ul> <li>onStatusChanged</li> </ul> <pre><code>class MyStatusListener: SocialRadioStatusListener {\n\n    override fun onStatusChanged(variables: List&lt;AutomixIQStatusVariable&gt;, status: AutomixIQStatus) {\n        // Monitor status update\n    }\n}\n</code></pre>"},{"location":"Update-ui/#monitor-status-update","title":"Monitor status update","text":"<p>SocialRadio reports the player status every time it is updated. You can get the current player status from the <code>SocialRadioStatus</code> object and the list of <code>SocialRadioStatusVariable</code> that gets updated since the last time a <code>onStatusChanged</code> is invoked. Use the value of each <code>AutomixIQStatusVariable</code> to update your player UI.</p> <p>For details of each status field, see <code>SocialRadioStatus</code> and <code>SocialRadioStatusVariable</code></p> <pre><code>var latestStatus: SocialRadioStatus? = null\n\noverride fun onStatusChanged(variables: List&lt;SocialRadioStatusVariable&gt;, status: SocialRadioStatus) {\n    // Monitor status update\n\n    this.latestStatus = status\n\n    for (property in variables) {    \n        when (property) {\n            SocialRadioStatusVariable.PLAYING -&gt; {}\n            SocialRadioStatusVariable.MIXING -&gt; {}\n            SocialRadioStatusVariable.PLAYING_TRACK_IDENTIFIER -&gt; {}\n            SocialRadioStatusVariable.PLAYING_TRACK_INDEX -&gt; {}\n            SocialRadioStatusVariable.PLAYING_TRACK_CURRENT_TIME -&gt; {}\n            SocialRadioStatusVariable.PLAYING_TRACK_TOTAL_TIME -&gt; {}\n            SocialRadioStatusVariable.PLAYLIST -&gt; {}\n            SocialRadioStatusVariable.FAILED_TRACK_LOAD_IDENTIFIERS -&gt; {}\n            SocialRadioStatusVariable.EXPLICIT_LYRICS_FILTERING -&gt; {}\n            SocialRadioStatusVariable.MIX_ID -&gt; {}\n            SocialRadioStatusVariable.PLAYBACK_MODE -&gt; {}\n        }\n    }\n}\n</code></pre> <p>A helper function have been created to help you easily get the value of specific <code>SocialRadioStatusVariable</code> from <code>SocialRadioStatus</code></p> Get value for AutomixIQStatusVariable<pre><code>SocialRadioStatus.getValue&lt;T&gt;(AutomixIQStatusVariable)\n</code></pre>"}]}